"""Module for simple LangChain RAG system."""

import json
import os
from dotenv import load_dotenv

from langchain_community.vectorstores import Chroma
from langchain_openai import OpenAIEmbeddings, OpenAI
from langchain.chains import RetrievalQA
from langchain.schema import Document
from langchain.prompts import PromptTemplate

load_dotenv()


class SimpleLangChain:
    """LangChain RAG —Å–∏—Å—Ç–µ–º–∞."""

    def __init__(self):
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key or api_key == 'your_openai_api_key_here':
            raise Exception("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ —Ñ–∞–π–ª–µ .env")

        self.vectorstore = None
        self.qa = None

    def setup(self, json_file='projects_enriched.json'):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã –∏–∑ JSON —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏.
        :param json_file: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        :type json_file: str
        """
        print("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

        with open(json_file, 'r', encoding='utf-8') as f:
            projects = json.load(f)

        documents = []
        for project in projects:
            if project['status'] == 'success':
                text = f"{project['title']}\n{project['content']}"

                if 'enriched' in project:
                    enriched = project['enriched']
                    text += f"\n–ò–Ω–¥—É—Å—Ç—Ä–∏—è: {enriched.get('industry', '')}"
                    text += f"\n–ö–ª–∏–µ–Ω—Ç: {enriched.get('company', '')}"

                metadata = {
                    'url': project['url'],
                    'title': project['title']
                }
                doc = Document(page_content=text, metadata=metadata)
                documents.append(doc)

        print(f"üìÑ –°–æ–∑–¥–∞–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

        print("üß† –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤...")
        self.vectorstore = Chroma.from_documents(
            documents=documents,
            embedding=OpenAIEmbeddings(),
            persist_directory='./chroma'
        )

        prompt_template = """–¢—ã - –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö.

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê:
- –í—Å–µ–≥–¥–∞ –ø—Ä–∏–≤–æ–¥–∏ –ö–û–ù–ö–†–ï–¢–ù–´–ï –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è –ö–û–ú–ü–ê–ù–ò–ô-–ö–õ–ò–ï–ù–¢–û–í (–ú–∞–≥–Ω–∏—Ç, KazanExpress, Lamoda –∏ –¥—Ä.)
- –î–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ú—ã –¥–µ–ª–∞–ª–∏ X –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ Y"
- –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º

–ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ò–• –û–¢–í–ï–¢–û–í:
–í–û–ü–†–û–°: –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤?
–û–¢–í–ï–¢: –ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ HR-–±–æ—Ç–∞ –¥–ª—è –ú–∞–≥–Ω–∏—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –¥–ª—è KazanExpress.


–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤:
{context}

–í–æ–ø—Ä–æ—Å: {question}

–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏:"""

        PROMPT = PromptTemplate(
            template=prompt_template,
            input_variables=["context", "question"]
        )
        self.qa = RetrievalQA.from_chain_type(
            llm=OpenAI(temperature=0.7),
            retriever=self.vectorstore.as_retriever(
                search_kwargs={"k": 3}),
            return_source_documents=True,
            chain_type_kwargs={"prompt": PROMPT}
        )

    def ask(self, question):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∫ RAG —Å–∏—Å—Ç–µ–º–µ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
        :param question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :type question: str
        :return: –û—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        :rtype: str
        """
        if not self.qa:
            return "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup()."

        result = self.qa.invoke({"query": question})
        answer = result['result']
        return answer
